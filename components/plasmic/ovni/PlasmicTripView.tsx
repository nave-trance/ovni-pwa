// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s4A8zbVV2YneJHZ4PPAS7d
// Component: ibDSAEBazH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  useDependencyAwareQuery
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu"; // plasmic-import: fo-n3xHvdqt/codeComponent
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu"; // plasmic-import: QSmezaW-Gyu/codeComponent
import TripDetail from "../../TripDetail"; // plasmic-import: CNL2SJMT4Y/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: eqBx5aJsUvSBW/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_ovni.module.css"; // plasmic-import: s4A8zbVV2YneJHZ4PPAS7d/projectcss
import sty from "./PlasmicTripView.module.css"; // plasmic-import: ibDSAEBazH/css

export type PlasmicTripView__VariantMembers = {};
export type PlasmicTripView__VariantsArgs = {};
type VariantPropType = keyof PlasmicTripView__VariantsArgs;
export const PlasmicTripView__VariantProps = new Array<VariantPropType>();

export type PlasmicTripView__ArgsType = {
  tourTitle?: string;
};
type ArgPropType = keyof PlasmicTripView__ArgsType;
export const PlasmicTripView__ArgProps = new Array<ArgPropType>("tourTitle");

export type PlasmicTripView__OverridesType = {
  tripsView?: p.Flex<"div">;
  menu?: p.Flex<typeof AntdMenu>;
  tripTab?: p.Flex<typeof AntdMenuItem>;
  text?: p.Flex<"div">;
  tripDetail?: p.Flex<typeof TripDetail>;
};

export interface DefaultTripViewProps {
  tourTitle?: string;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTripView__RenderFunc(props: {
  variants: PlasmicTripView__VariantsArgs;
  args: PlasmicTripView__ArgsType;
  overrides: PlasmicTripView__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "activeTrip",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $queries.trips?.data[0].title ? $queries.trips?.data[0].title : ""
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  useDependencyAwareQuery({
    name: "trips",
    getDataOp: () => ({
      sourceId: "3D2qpwXrTDzp5gVoPy8prT",
      opId: "5b2ab527-d773-4f82-bfe3-08768c9fe568",
      userArgs: {
        filters: [
          (() => {
            try {
              return $props.tourTitle;
            } catch (e) {
              if (e instanceof TypeError) {
                return null;
              }
              throw e;
            }
          })()
        ]
      },
      cacheKey: "plasmic.$.8iYfaC2kn.$.",
      invalidatedKeys: null,
      roleId: null
    }),
    $queries,
    setDollarQueries
  });

  return (
    true ? (
      <div
        data-plasmic-name={"tripsView"}
        data-plasmic-override={overrides.tripsView}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.tripsView
        )}
      >
        <AntdMenu
          data-plasmic-name={"menu"}
          data-plasmic-override={overrides.menu}
          className={classNames("__wab_instance", sty.menu)}
          mode={"horizontal" as const}
        >
          {(
            (() => {
              try {
                return $queries.trips.data;
              } catch (e) {
                if (e instanceof TypeError) {
                  return [];
                }
                throw e;
              }
            })() ?? []
          ).map((trip, currentIndex) => (
            <AntdMenuItem
              data-plasmic-name={"tripTab"}
              data-plasmic-override={overrides.tripTab}
              className={classNames("__wab_instance", sty.tripTab)}
              key={trip.record_id}
              onClick={async () => {
                const $steps = {};
                $steps["updateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "J5NeTC9Bd",
                            componentUuid: "ibDSAEBazH",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["activeTrip"]
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "J5NeTC9Bd",
                            componentUuid: "ibDSAEBazH",
                            argName: "operation"
                          },
                          () => 0
                        ),
                        value: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "J5NeTC9Bd",
                            componentUuid: "ibDSAEBazH",
                            argName: "value"
                          },
                          () => trip.title
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "J5NeTC9Bd",
                          componentUuid: "ibDSAEBazH"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateVariable"] === "object" &&
                  typeof $steps["updateVariable"].then === "function"
                ) {
                  $steps["updateVariable"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "J5NeTC9Bd",
                      componentUuid: "ibDSAEBazH"
                    },
                    $steps["updateVariable"]
                  );
                }
              }}
              title={trip.title}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {(() => {
                  try {
                    return trip.title;
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </div>
            </AntdMenuItem>
          ))}
        </AntdMenu>
        {true ? (
          <TripDetail
            data-plasmic-name={"tripDetail"}
            data-plasmic-override={overrides.tripDetail}
            className={classNames("__wab_instance", sty.tripDetail)}
            tripTitle={$state.activeTrip}
          />
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tripsView: ["tripsView", "menu", "tripTab", "text", "tripDetail"],
  menu: ["menu", "tripTab", "text"],
  tripTab: ["tripTab", "text"],
  text: ["text"],
  tripDetail: ["tripDetail"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  tripsView: "div";
  menu: typeof AntdMenu;
  tripTab: typeof AntdMenuItem;
  text: "div";
  tripDetail: typeof TripDetail;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTripView__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTripView__VariantsArgs;
    args?: PlasmicTripView__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTripView__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTripView__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTripView__ArgProps,
          internalVariantPropNames: PlasmicTripView__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTripView__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "tripsView") {
    func.displayName = "PlasmicTripView";
  } else {
    func.displayName = `PlasmicTripView.${nodeName}`;
  }
  return func;
}

export const PlasmicTripView = Object.assign(
  // Top-level PlasmicTripView renders the root element
  makeNodeComponent("tripsView"),
  {
    // Helper components rendering sub-elements
    menu: makeNodeComponent("menu"),
    tripTab: makeNodeComponent("tripTab"),
    text: makeNodeComponent("text"),
    tripDetail: makeNodeComponent("tripDetail"),

    // Metadata about props expected for PlasmicTripView
    internalVariantProps: PlasmicTripView__VariantProps,
    internalArgProps: PlasmicTripView__ArgProps
  }
);

export default PlasmicTripView;
/* prettier-ignore-end */
