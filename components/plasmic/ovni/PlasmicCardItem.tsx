// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s4A8zbVV2YneJHZ4PPAS7d
// Component: 3Xy4dZ9QFi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Card from "../../Card"; // plasmic-import: Dsd636-ORe/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_ovni.module.css"; // plasmic-import: s4A8zbVV2YneJHZ4PPAS7d/projectcss
import sty from "./PlasmicCardItem.module.css"; // plasmic-import: 3Xy4dZ9QFi/css

export type PlasmicCardItem__VariantMembers = {};
export type PlasmicCardItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardItem__VariantsArgs;
export const PlasmicCardItem__VariantProps = new Array<VariantPropType>();

export type PlasmicCardItem__ArgsType = {
  title?: string;
  description?: string;
  highlight?: string;
};
type ArgPropType = keyof PlasmicCardItem__ArgsType;
export const PlasmicCardItem__ArgProps = new Array<ArgPropType>(
  "title",
  "description",
  "highlight"
);

export type PlasmicCardItem__OverridesType = {
  root?: p.Flex<"div">;
  card?: p.Flex<typeof Card>;
  title?: p.Flex<"div">;
  description?: p.Flex<"div">;
  info?: p.Flex<"div">;
};

export interface DefaultCardItemProps {
  title?: string;
  description?: string;
  highlight?: string;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCardItem__RenderFunc(props: {
  variants: PlasmicCardItem__VariantsArgs;
  args: PlasmicCardItem__ArgsType;
  overrides: PlasmicCardItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Card
        data-plasmic-name={"card"}
        data-plasmic-override={overrides.card}
        className={classNames("__wab_instance", sty.card)}
        content={
          true ? (
            <div className={classNames(projectcss.all, sty.freeBox__eHre)}>
              <div className={classNames(projectcss.all, sty.freeBox___419)}>
                <div
                  data-plasmic-name={"title"}
                  data-plasmic-override={overrides.title}
                  className={classNames(projectcss.all, sty.title)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___37Fy
                    )}
                  >
                    {(() => {
                      try {
                        return $props.title;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </div>
                </div>
                <div
                  data-plasmic-name={"description"}
                  data-plasmic-override={overrides.description}
                  className={classNames(projectcss.all, sty.description)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u0Kfl
                    )}
                  >
                    {(() => {
                      try {
                        return $props.description;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"info"}
                data-plasmic-override={overrides.info}
                className={classNames(projectcss.all, sty.info)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w1FLx
                  )}
                >
                  {(() => {
                    try {
                      return $props.highlight;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return "Enter some text";
                      }
                      throw e;
                    }
                  })()}
                </div>
              </div>
            </div>
          ) : null
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "card", "title", "description", "info"],
  card: ["card", "title", "description", "info"],
  title: ["title"],
  description: ["description"],
  info: ["info"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  card: typeof Card;
  title: "div";
  description: "div";
  info: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardItem__VariantsArgs;
    args?: PlasmicCardItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCardItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCardItem__ArgProps,
          internalVariantPropNames: PlasmicCardItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCardItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardItem";
  } else {
    func.displayName = `PlasmicCardItem.${nodeName}`;
  }
  return func;
}

export const PlasmicCardItem = Object.assign(
  // Top-level PlasmicCardItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    card: makeNodeComponent("card"),
    title: makeNodeComponent("title"),
    description: makeNodeComponent("description"),
    info: makeNodeComponent("info"),

    // Metadata about props expected for PlasmicCardItem
    internalVariantProps: PlasmicCardItem__VariantProps,
    internalArgProps: PlasmicCardItem__ArgProps
  }
);

export default PlasmicCardItem;
/* prettier-ignore-end */
