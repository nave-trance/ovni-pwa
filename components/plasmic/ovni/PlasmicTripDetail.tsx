// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s4A8zbVV2YneJHZ4PPAS7d
// Component: CNL2SJMT4Y

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  useDependencyAwareQuery
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CardItem from "../../CardItem"; // plasmic-import: 3Xy4dZ9QFi/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: eqBx5aJsUvSBW/codeComponent

import { useScreenVariants as useScreenVariantsn3GbfBwefkZu8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: n3gbfBWEFKZu8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_ovni.module.css"; // plasmic-import: s4A8zbVV2YneJHZ4PPAS7d/projectcss
import sty from "./PlasmicTripDetail.module.css"; // plasmic-import: CNL2SJMT4Y/css

export type PlasmicTripDetail__VariantMembers = {};
export type PlasmicTripDetail__VariantsArgs = {};
type VariantPropType = keyof PlasmicTripDetail__VariantsArgs;
export const PlasmicTripDetail__VariantProps = new Array<VariantPropType>();

export type PlasmicTripDetail__ArgsType = {
  tripTitle?: string;
};
type ArgPropType = keyof PlasmicTripDetail__ArgsType;
export const PlasmicTripDetail__ArgProps = new Array<ArgPropType>("tripTitle");

export type PlasmicTripDetail__OverridesType = {
  root?: p.Flex<"div">;
  route?: p.Flex<"div">;
  cardItem?: p.Flex<typeof CardItem>;
  passengers?: p.Flex<"div">;
  ticketsTable?: p.Flex<typeof RichTable>;
};

export interface DefaultTripDetailProps {
  tripTitle?: string;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTripDetail__RenderFunc(props: {
  variants: PlasmicTripDetail__VariantsArgs;
  args: PlasmicTripDetail__ArgsType;
  overrides: PlasmicTripDetail__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "ticketsTable.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ticketsTable.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ticketsTable.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  useDependencyAwareQuery({
    name: "waypoints",
    getDataOp: () => ({
      sourceId: "3D2qpwXrTDzp5gVoPy8prT",
      opId: "582c6e1f-6487-4a9a-9ef7-cc1bcfb0ffe6",
      userArgs: {
        filters: [
          (() => {
            try {
              return $props.tripTitle;
            } catch (e) {
              if (e instanceof TypeError) {
                return null;
              }
              throw e;
            }
          })()
        ]
      },
      cacheKey:
        "plasmic.$." +
        (() => {
          try {
            return "trip_detail";
          } catch (e) {
            if (e instanceof TypeError) {
              return "";
            }
            throw e;
          }
        })() +
        ".$.eZqER7elS.$.",
      invalidatedKeys: null,
      roleId: null
    }),
    $queries,
    setDollarQueries
  });
  useDependencyAwareQuery({
    name: "tickets",
    getDataOp: () => ({
      sourceId: "3D2qpwXrTDzp5gVoPy8prT",
      opId: "5bc73c75-ad9a-4936-8dea-a3fb03406fa4",
      userArgs: {
        filters: [
          (() => {
            try {
              return $props.tripTitle;
            } catch (e) {
              if (e instanceof TypeError) {
                return null;
              }
              throw e;
            }
          })()
        ]
      },
      cacheKey:
        "plasmic.$." +
        (() => {
          try {
            return "trip_detail";
          } catch (e) {
            if (e instanceof TypeError) {
              return "";
            }
            throw e;
          }
        })() +
        ".$.fc0-qesPf.$.",
      invalidatedKeys: null,
      roleId: null
    }),
    $queries,
    setDollarQueries
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsn3GbfBwefkZu8()
  });

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"route"}
          data-plasmic-override={overrides.route}
          hasGap={true}
          className={classNames(projectcss.all, sty.route)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fFCk)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__e9Seb
              )}
            >
              {"Rota"}
            </div>
          </div>
          {(
            (() => {
              try {
                return $queries.waypoints.data;
              } catch (e) {
                if (e instanceof TypeError) {
                  return [];
                }
                throw e;
              }
            })() ?? []
          ).map((waypoint, currentIndex) => (
            <CardItem
              data-plasmic-name={"cardItem"}
              data-plasmic-override={overrides.cardItem}
              className={classNames("__wab_instance", sty.cardItem)}
              description={waypoint.type}
              highlight={waypoint.passenger_count + " passageiros"}
              key={currentIndex}
              title={waypoint.title}
            />
          ))}
        </p.Stack>
        <div
          data-plasmic-name={"passengers"}
          data-plasmic-override={overrides.passengers}
          className={classNames(projectcss.all, sty.passengers)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fhfWb)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gtRax
              )}
            >
              {"Passageiros"}
            </div>
          </div>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.ticketsTable),
              data: (() => {
                try {
                  return $queries.tickets;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              fields: (() => {
                const __composite = [
                  {
                    key: "__airtable_id",
                    fieldId: "__airtable_id",
                    isHidden: true
                  },
                  { key: "id", fieldId: "id", isHidden: true },
                  { key: "passenger", fieldId: "passenger", isHidden: true },
                  {
                    key: "status",
                    fieldId: "status",
                    expr: null,
                    title: "Status"
                  },
                  { key: "order", fieldId: "order", isHidden: true },
                  { key: "tour", fieldId: "tour", isHidden: true },
                  { key: "trip", fieldId: "trip", isHidden: true },
                  {
                    key: "boarding",
                    fieldId: "boarding",
                    title: "Embarque",
                    isHidden: true
                  },
                  {
                    key: "passenger_name",
                    fieldId: "passenger_name",
                    title: "Passageiro"
                  },
                  { key: "passenger_rg", fieldId: "passenger_rg", title: "RG" },
                  {
                    key: "passenger_phone",
                    fieldId: "passenger_phone",
                    title: "Telefone"
                  },
                  {
                    key: "whatsapp_url",
                    fieldId: "whatsapp_url",
                    isHidden: true
                  },
                  { key: "record_id", fieldId: "record_id", isHidden: true },
                  { key: "datetime", fieldId: "datetime", isHidden: true },
                  {
                    key: "passenger_rg copy",
                    fieldId: "passenger_rg copy",
                    isHidden: true
                  }
                ];
                __composite["3"]["expr"] = currentItem => {
                  return currentItem.status[0];
                };
                return __composite;
              })(),

              onRowSelectionChanged: async (...eventArgs) => {
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKey",
                  ["ticketsTable", "selectedRowKey"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRow",
                  ["ticketsTable", "selectedRow"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRows",
                  ["ticketsTable", "selectedRows"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
              },
              selectedRowKey: p.generateStateValueProp($state, [
                "ticketsTable",
                "selectedRowKey"
              ])
            };
            p.initializeCodeComponentStates(
              $state,
              [
                {
                  name: "selectedRowKey",
                  plasmicStateName: "ticketsTable.selectedRowKey"
                },
                {
                  name: "selectedRow",
                  plasmicStateName: "ticketsTable.selectedRow"
                },
                {
                  name: "selectedRows",
                  plasmicStateName: "ticketsTable.selectedRows"
                }
              ],
              [],
              RichTable_Helpers ?? {},
              child$Props
            );

            return (
              <RichTable
                data-plasmic-name={"ticketsTable"}
                data-plasmic-override={overrides.ticketsTable}
                {...child$Props}
              />
            );
          })()}
        </div>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "route", "cardItem", "passengers", "ticketsTable"],
  route: ["route", "cardItem"],
  cardItem: ["cardItem"],
  passengers: ["passengers", "ticketsTable"],
  ticketsTable: ["ticketsTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  route: "div";
  cardItem: typeof CardItem;
  passengers: "div";
  ticketsTable: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTripDetail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTripDetail__VariantsArgs;
    args?: PlasmicTripDetail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTripDetail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTripDetail__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTripDetail__ArgProps,
          internalVariantPropNames: PlasmicTripDetail__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTripDetail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTripDetail";
  } else {
    func.displayName = `PlasmicTripDetail.${nodeName}`;
  }
  return func;
}

export const PlasmicTripDetail = Object.assign(
  // Top-level PlasmicTripDetail renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    route: makeNodeComponent("route"),
    cardItem: makeNodeComponent("cardItem"),
    passengers: makeNodeComponent("passengers"),
    ticketsTable: makeNodeComponent("ticketsTable"),

    // Metadata about props expected for PlasmicTripDetail
    internalVariantProps: PlasmicTripDetail__VariantProps,
    internalArgProps: PlasmicTripDetail__ArgProps
  }
);

export default PlasmicTripDetail;
/* prettier-ignore-end */
