// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s4A8zbVV2YneJHZ4PPAS7d
// Component: AHVBnXmex-jZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  useDependencyAwareQuery
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Info from "../../Info"; // plasmic-import: 76wng9QPPi/component
import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu"; // plasmic-import: fo-n3xHvdqt/codeComponent
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu"; // plasmic-import: QSmezaW-Gyu/codeComponent
import OfferItem from "../../OfferItem"; // plasmic-import: 3Xy4dZ9QFi/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal"; // plasmic-import: xx93QbkHH5i/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: eqBx5aJsUvSBW/codeComponent

import { useScreenVariants as useScreenVariantsn3GbfBwefkZu8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: n3gbfBWEFKZu8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_ovni.module.css"; // plasmic-import: s4A8zbVV2YneJHZ4PPAS7d/projectcss
import sty from "./PlasmicExcursao.module.css"; // plasmic-import: AHVBnXmex-jZ/css

import LocalActivitysvgIcon from "./icons/PlasmicIcon__LocalActivitysvg"; // plasmic-import: 9Ti-YtqDJa/icon
import EventSeatsvgIcon from "./icons/PlasmicIcon__EventSeatsvg"; // plasmic-import: nUclHWRbUL/icon
import PaymentsFill0Wght400Grad0Opsz48SvgIcon from "./icons/PlasmicIcon__PaymentsFill0Wght400Grad0Opsz48Svg"; // plasmic-import: sB3rP83jcG/icon
import ModeOfTravelsvgIcon from "./icons/PlasmicIcon__ModeOfTravelsvg"; // plasmic-import: WZEm74zGD5/icon

export type PlasmicExcursao__VariantMembers = {};
export type PlasmicExcursao__VariantsArgs = {};
type VariantPropType = keyof PlasmicExcursao__VariantsArgs;
export const PlasmicExcursao__VariantProps = new Array<VariantPropType>();

export type PlasmicExcursao__ArgsType = {};
type ArgPropType = keyof PlasmicExcursao__ArgsType;
export const PlasmicExcursao__ArgProps = new Array<ArgPropType>();

export type PlasmicExcursao__OverridesType = {
  root?: p.Flex<"div">;
  tumbnail?: p.Flex<typeof p.PlasmicImg>;
  heading?: p.Flex<"div">;
  left?: p.Flex<"div">;
  caption?: p.Flex<"div">;
  title?: p.Flex<"h2">;
  subtitle?: p.Flex<"h3">;
  date?: p.Flex<"div">;
  right?: p.Flex<"div">;
  info?: p.Flex<"div">;
  soldTickets?: p.Flex<typeof Info>;
  emptySeats?: p.Flex<typeof Info>;
  menu?: p.Flex<typeof AntdMenu>;
  sales?: p.Flex<typeof AntdMenuItem>;
  text?: p.Flex<"div">;
  menuItem?: p.Flex<typeof AntdMenuItem>;
  viagens?: p.Flex<"div">;
  body?: p.Flex<"section">;
  salesView?: p.Flex<"div">;
  offersComponent?: p.Flex<"div">;
  offersHeading?: p.Flex<"div">;
  offersTitle?: p.Flex<"h3">;
  offerItem?: p.Flex<typeof OfferItem>;
  ordersComponent?: p.Flex<"div">;
  ordersHeading?: p.Flex<"div">;
  ordersTitle?: p.Flex<"h3">;
  table?: p.Flex<typeof RichTable>;
  modal?: p.Flex<typeof AntdModal>;
};

export interface DefaultExcursaoProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicExcursao__RenderFunc(props: {
  variants: PlasmicExcursao__VariantsArgs;
  args: PlasmicExcursao__ArgsType;
  overrides: PlasmicExcursao__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  useDependencyAwareQuery({
    name: "tour",
    getDataOp: () => ({
      sourceId: "3D2qpwXrTDzp5gVoPy8prT",
      opId: "2f78b5cc-aa45-4734-9a28-fb17fc6852be",
      userArgs: {
        id: [
          (() => {
            try {
              return $ctx.query.tour_id;
            } catch (e) {
              if (e instanceof TypeError) {
                return null;
              }
              throw e;
            }
          })()
        ]
      },
      cacheKey: "plasmic.$.KuPiQuxZx.$.",
      invalidatedKeys: ["plasmic_refresh_all"],
      roleId: null
    }),
    $queries,
    setDollarQueries
  });
  useDependencyAwareQuery({
    name: "batches",
    getDataOp: () => ({
      sourceId: "3D2qpwXrTDzp5gVoPy8prT",
      opId: "2eb34469-94f3-4441-ac28-82cb932fd172",
      userArgs: {
        filters: [
          (() => {
            try {
              return $queries.tour.data.title;
            } catch (e) {
              if (e instanceof TypeError) {
                return null;
              }
              throw e;
            }
          })()
        ]
      },
      cacheKey: "plasmic.$.bPvUNNHv5.$.",
      invalidatedKeys: ["plasmic_refresh_all"],
      roleId: null
    }),
    $queries,
    setDollarQueries
  });
  useDependencyAwareQuery({
    name: "orders",
    getDataOp: () => ({
      sourceId: "3D2qpwXrTDzp5gVoPy8prT",
      opId: "7a8b1727-1f87-478e-baa7-634d8ac2541d",
      userArgs: {},
      cacheKey: "plasmic.$.RLXJHFcm-.$.",
      invalidatedKeys: ["plasmic_refresh_all"],
      roleId: null
    }),
    $queries,
    setDollarQueries
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsn3GbfBwefkZu8()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicExcursao.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicExcursao.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicExcursao.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <p.PlasmicImg
            data-plasmic-name={"tumbnail"}
            data-plasmic-override={overrides.tumbnail}
            alt={""}
            className={classNames(sty.tumbnail)}
            displayHeight={
              hasVariant(globalVariants, "screen", "sm")
                ? ("300px" as const)
                : ("600px" as const)
            }
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={(() => {
              try {
                return $queries.tour.data.tumbnail[0].url;
              } catch (e) {
                if (e instanceof TypeError) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          {(hasVariant(globalVariants, "screen", "sm") ? true : true) ? (
            <div
              data-plasmic-name={"heading"}
              data-plasmic-override={overrides.heading}
              className={classNames(projectcss.all, sty.heading)}
            >
              {(hasVariant(globalVariants, "screen", "sm") ? true : true) ? (
                <div
                  data-plasmic-name={"left"}
                  data-plasmic-override={overrides.left}
                  className={classNames(projectcss.all, sty.left)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"caption"}
                    data-plasmic-override={overrides.caption}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.caption)}
                  >
                    <h2
                      data-plasmic-name={"title"}
                      data-plasmic-override={overrides.title}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.title
                      )}
                    >
                      {(() => {
                        try {
                          return $queries.tour.data.title;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </h2>
                    <h3
                      data-plasmic-name={"subtitle"}
                      data-plasmic-override={overrides.subtitle}
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.subtitle
                      )}
                    >
                      {(() => {
                        try {
                          return $queries.tour.data.subtitle[0];
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </h3>
                  </p.Stack>
                  <div
                    data-plasmic-name={"date"}
                    data-plasmic-override={overrides.date}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.date
                    )}
                  >
                    {(() => {
                      try {
                        return $queries.tour.data.start[0];
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </div>
                </div>
              ) : null}
              {(hasVariant(globalVariants, "screen", "sm") ? true : true) ? (
                <div
                  data-plasmic-name={"right"}
                  data-plasmic-override={overrides.right}
                  className={classNames(projectcss.all, sty.right)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"info"}
                      data-plasmic-override={overrides.info}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.info)}
                    >
                      <Info
                        data-plasmic-name={"soldTickets"}
                        data-plasmic-override={overrides.soldTickets}
                        className={classNames(
                          "__wab_instance",
                          sty.soldTickets
                        )}
                        icon={
                          <LocalActivitysvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bsarG
                            )}
                            role={"img"}
                          />
                        }
                        unit={"Passageiros" as const}
                        value={(() => {
                          try {
                            return $queries.tour.data.occupancy;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <Info
                        data-plasmic-name={"emptySeats"}
                        data-plasmic-override={overrides.emptySeats}
                        className={classNames("__wab_instance", sty.emptySeats)}
                        icon={
                          <EventSeatsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gZAuL
                            )}
                            role={"img"}
                          />
                        }
                        unit={"Vagas" as const}
                        value={(() => {
                          try {
                            return $queries.tour.data.avaiability;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </p.Stack>
                  ) : null}
                </div>
              ) : null}
            </div>
          ) : null}
          <AntdMenu
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            className={classNames("__wab_instance", sty.menu)}
          >
            <AntdMenuItem
              data-plasmic-name={"sales"}
              data-plasmic-override={overrides.sales}
              className={classNames("__wab_instance", sty.sales)}
              key={"menuItemKey1" as const}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xH3Py)}
                >
                  <PaymentsFill0Wght400Grad0Opsz48SvgIcon
                    className={classNames(projectcss.all, sty.svg__mlLUo)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Vendas"}
                  </div>
                </p.Stack>
              ) : null}
            </AntdMenuItem>
            <AntdMenuItem
              data-plasmic-name={"menuItem"}
              data-plasmic-override={overrides.menuItem}
              className={classNames("__wab_instance", sty.menuItem)}
              key={"menuItemKey2" as const}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__b6RIe)}
              >
                <ModeOfTravelsvgIcon
                  className={classNames(projectcss.all, sty.svg__qwsmA)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"viagens"}
                  data-plasmic-override={overrides.viagens}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.viagens
                  )}
                >
                  {"Viagens"}
                </div>
              </p.Stack>
            </AntdMenuItem>
          </AntdMenu>
          <section
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(projectcss.all, sty.body)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"salesView"}
                data-plasmic-override={overrides.salesView}
                hasGap={true}
                className={classNames(projectcss.all, sty.salesView)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"offersComponent"}
                  data-plasmic-override={overrides.offersComponent}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.offersComponent)}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"offersHeading"}
                      data-plasmic-override={overrides.offersHeading}
                      className={classNames(projectcss.all, sty.offersHeading)}
                    >
                      <h3
                        data-plasmic-name={"offersTitle"}
                        data-plasmic-override={overrides.offersTitle}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.offersTitle
                        )}
                      >
                        {"Ofertas"}
                      </h3>
                    </div>
                  ) : null}
                  {(
                    (() => {
                      try {
                        return $queries.batches.data;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return [];
                        }
                        throw e;
                      }
                    })() ?? []
                  ).map((batch, currentIndex) => (
                    <OfferItem
                      data-plasmic-name={"offerItem"}
                      data-plasmic-override={overrides.offerItem}
                      className={classNames("__wab_instance", sty.offerItem)}
                      description={batch.description}
                      key={currentIndex}
                      sold={
                        hasVariant(globalVariants, "screen", "sm")
                          ? (() => {
                              try {
                                return batch.sold;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          : (() => {
                              try {
                                return batch.sold;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                      }
                      title={batch.title}
                    />
                  ))}
                </p.Stack>
                {(hasVariant(globalVariants, "screen", "sm") ? true : true) ? (
                  <div
                    data-plasmic-name={"ordersComponent"}
                    data-plasmic-override={overrides.ordersComponent}
                    className={classNames(projectcss.all, sty.ordersComponent)}
                  >
                    {true ? (
                      <div
                        data-plasmic-name={"ordersHeading"}
                        data-plasmic-override={overrides.ordersHeading}
                        className={classNames(
                          projectcss.all,
                          sty.ordersHeading
                        )}
                      >
                        <h3
                          data-plasmic-name={"ordersTitle"}
                          data-plasmic-override={overrides.ordersTitle}
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.ordersTitle
                          )}
                        >
                          {"Pedidos"}
                        </h3>
                      </div>
                    ) : null}
                    {(() => {
                      const child$Props = {
                        canSelectRows: "none" as const,
                        className: classNames("__wab_instance", sty.table),
                        data: (() => {
                          try {
                            return $queries.orders;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        fields: (() => {
                          const __composite = [
                            {
                              key: "__airtable_id",
                              fieldId: "__airtable_id",
                              isHidden: true
                            },
                            {
                              key: "id",
                              fieldId: "id",
                              title: " ",
                              dataType: "number",
                              isHidden: true
                            },
                            {
                              key: "datetime",
                              fieldId: "datetime",
                              title: "Data",
                              dataType: "string",
                              expr: null
                            },
                            {
                              key: "user",
                              fieldId: "user",
                              title: "Comprador",
                              dataType: "string",
                              expr: null
                            },
                            { key: "batch", fieldId: "batch", isHidden: true },
                            {
                              key: "tickets",
                              fieldId: "tickets",
                              isHidden: true
                            },
                            {
                              key: "passengers",
                              fieldId: "passengers",
                              isHidden: true
                            },
                            { key: "status", fieldId: "status" },
                            { key: "tour", fieldId: "tour", isHidden: true },
                            { key: "total", fieldId: "total", expr: null },
                            {
                              key: "receipt",
                              fieldId: "receipt",
                              isHidden: false
                            },
                            {
                              key: "record_id",
                              fieldId: "record_id",
                              isHidden: true
                            },
                            {
                              key: "buyer_name",
                              fieldId: "buyer_name",
                              isHidden: true
                            },
                            {
                              key: "formatted_datetime",
                              fieldId: "formatted_datetime",
                              isHidden: true
                            }
                          ];
                          __composite["2"]["expr"] = currentItem => {
                            return currentItem.formatted_datetime;
                          };
                          __composite["3"]["expr"] = currentItem => {
                            return currentItem.buyer_name;
                          };
                          __composite["9"]["expr"] = currentItem => {
                            return "R$ " + currentItem.total;
                          };
                          return __composite;
                        })(),

                        hideColumnPicker: hasVariant(
                          globalVariants,
                          "screen",
                          "sm"
                        )
                          ? true
                          : undefined,
                        hideDensity: hasVariant(globalVariants, "screen", "sm")
                          ? true
                          : undefined,
                        hideExports: hasVariant(globalVariants, "screen", "sm")
                          ? true
                          : undefined,
                        hideSearch: hasVariant(globalVariants, "screen", "sm")
                          ? true
                          : undefined,
                        onRowSelectionChanged: async (...eventArgs) => {
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKey",
                            ["table", "selectedRowKey"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRow",
                            ["table", "selectedRow"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRows",
                            ["table", "selectedRows"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                        },
                        selectedRowKey: p.generateStateValueProp($state, [
                          "table",
                          "selectedRowKey"
                        ])
                      };
                      p.initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "selectedRowKey",
                            plasmicStateName: "table.selectedRowKey"
                          },
                          {
                            name: "selectedRow",
                            plasmicStateName: "table.selectedRow"
                          },
                          {
                            name: "selectedRows",
                            plasmicStateName: "table.selectedRows"
                          }
                        ],
                        [],
                        RichTable_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <RichTable
                          data-plasmic-name={"table"}
                          data-plasmic-override={overrides.table}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                ) : null}
              </p.Stack>
            ) : null}
          </section>
          {true ? (
            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              modalScopeClassName={sty["modal__modal"]}
              onOpenChange={p.generateStateOnChangeProp($state, [
                "modal",
                "open"
              ])}
              open={p.generateStateValueProp($state, ["modal", "open"])}
              title={"Modal title"}
            >
              <div className={classNames(projectcss.all, sty.freeBox__giRqa)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sZhfQ
                  )}
                >
                  {"Modal content"}
                </div>
              </div>
            </AntdModal>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tumbnail",
    "heading",
    "left",
    "caption",
    "title",
    "subtitle",
    "date",
    "right",
    "info",
    "soldTickets",
    "emptySeats",
    "menu",
    "sales",
    "text",
    "menuItem",
    "viagens",
    "body",
    "salesView",
    "offersComponent",
    "offersHeading",
    "offersTitle",
    "offerItem",
    "ordersComponent",
    "ordersHeading",
    "ordersTitle",
    "table",
    "modal"
  ],
  tumbnail: ["tumbnail"],
  heading: [
    "heading",
    "left",
    "caption",
    "title",
    "subtitle",
    "date",
    "right",
    "info",
    "soldTickets",
    "emptySeats"
  ],
  left: ["left", "caption", "title", "subtitle", "date"],
  caption: ["caption", "title", "subtitle"],
  title: ["title"],
  subtitle: ["subtitle"],
  date: ["date"],
  right: ["right", "info", "soldTickets", "emptySeats"],
  info: ["info", "soldTickets", "emptySeats"],
  soldTickets: ["soldTickets"],
  emptySeats: ["emptySeats"],
  menu: ["menu", "sales", "text", "menuItem", "viagens"],
  sales: ["sales", "text"],
  text: ["text"],
  menuItem: ["menuItem", "viagens"],
  viagens: ["viagens"],
  body: [
    "body",
    "salesView",
    "offersComponent",
    "offersHeading",
    "offersTitle",
    "offerItem",
    "ordersComponent",
    "ordersHeading",
    "ordersTitle",
    "table"
  ],
  salesView: [
    "salesView",
    "offersComponent",
    "offersHeading",
    "offersTitle",
    "offerItem",
    "ordersComponent",
    "ordersHeading",
    "ordersTitle",
    "table"
  ],
  offersComponent: [
    "offersComponent",
    "offersHeading",
    "offersTitle",
    "offerItem"
  ],
  offersHeading: ["offersHeading", "offersTitle"],
  offersTitle: ["offersTitle"],
  offerItem: ["offerItem"],
  ordersComponent: ["ordersComponent", "ordersHeading", "ordersTitle", "table"],
  ordersHeading: ["ordersHeading", "ordersTitle"],
  ordersTitle: ["ordersTitle"],
  table: ["table"],
  modal: ["modal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tumbnail: typeof p.PlasmicImg;
  heading: "div";
  left: "div";
  caption: "div";
  title: "h2";
  subtitle: "h3";
  date: "div";
  right: "div";
  info: "div";
  soldTickets: typeof Info;
  emptySeats: typeof Info;
  menu: typeof AntdMenu;
  sales: typeof AntdMenuItem;
  text: "div";
  menuItem: typeof AntdMenuItem;
  viagens: "div";
  body: "section";
  salesView: "div";
  offersComponent: "div";
  offersHeading: "div";
  offersTitle: "h3";
  offerItem: typeof OfferItem;
  ordersComponent: "div";
  ordersHeading: "div";
  ordersTitle: "h3";
  table: typeof RichTable;
  modal: typeof AntdModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExcursao__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExcursao__VariantsArgs;
    args?: PlasmicExcursao__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExcursao__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicExcursao__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicExcursao__ArgProps,
          internalVariantPropNames: PlasmicExcursao__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicExcursao__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExcursao";
  } else {
    func.displayName = `PlasmicExcursao.${nodeName}`;
  }
  return func;
}

export const PlasmicExcursao = Object.assign(
  // Top-level PlasmicExcursao renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tumbnail: makeNodeComponent("tumbnail"),
    heading: makeNodeComponent("heading"),
    left: makeNodeComponent("left"),
    caption: makeNodeComponent("caption"),
    title: makeNodeComponent("title"),
    subtitle: makeNodeComponent("subtitle"),
    date: makeNodeComponent("date"),
    right: makeNodeComponent("right"),
    info: makeNodeComponent("info"),
    soldTickets: makeNodeComponent("soldTickets"),
    emptySeats: makeNodeComponent("emptySeats"),
    menu: makeNodeComponent("menu"),
    sales: makeNodeComponent("sales"),
    text: makeNodeComponent("text"),
    menuItem: makeNodeComponent("menuItem"),
    viagens: makeNodeComponent("viagens"),
    body: makeNodeComponent("body"),
    salesView: makeNodeComponent("salesView"),
    offersComponent: makeNodeComponent("offersComponent"),
    offersHeading: makeNodeComponent("offersHeading"),
    offersTitle: makeNodeComponent("offersTitle"),
    offerItem: makeNodeComponent("offerItem"),
    ordersComponent: makeNodeComponent("ordersComponent"),
    ordersHeading: makeNodeComponent("ordersHeading"),
    ordersTitle: makeNodeComponent("ordersTitle"),
    table: makeNodeComponent("table"),
    modal: makeNodeComponent("modal"),

    // Metadata about props expected for PlasmicExcursao
    internalVariantProps: PlasmicExcursao__VariantProps,
    internalArgProps: PlasmicExcursao__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Excursão",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicExcursao;
/* prettier-ignore-end */
