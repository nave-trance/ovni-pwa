// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s4A8zbVV2YneJHZ4PPAS7d
// Component: AHVBnXmex-jZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  useDependencyAwareQuery
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import IconLabel from "../../IconLabel"; // plasmic-import: 76wng9QPPi/component
import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu"; // plasmic-import: fo-n3xHvdqt/codeComponent
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu"; // plasmic-import: QSmezaW-Gyu/codeComponent
import CardItem from "../../CardItem"; // plasmic-import: 3Xy4dZ9QFi/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: eqBx5aJsUvSBW/codeComponent

import { useScreenVariants as useScreenVariantsn3GbfBwefkZu8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: n3gbfBWEFKZu8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_ovni.module.css"; // plasmic-import: s4A8zbVV2YneJHZ4PPAS7d/projectcss
import sty from "./PlasmicExcursao.module.css"; // plasmic-import: AHVBnXmex-jZ/css

import LocalActivitysvgIcon from "./icons/PlasmicIcon__LocalActivitysvg"; // plasmic-import: 9Ti-YtqDJa/icon
import EventSeatsvgIcon from "./icons/PlasmicIcon__EventSeatsvg"; // plasmic-import: nUclHWRbUL/icon
import PaymentsFill0Wght400Grad0Opsz48SvgIcon from "./icons/PlasmicIcon__PaymentsFill0Wght400Grad0Opsz48Svg"; // plasmic-import: sB3rP83jcG/icon
import CalculatesvgIcon from "./icons/PlasmicIcon__Calculatesvg"; // plasmic-import: CcAtW2QgHs/icon
import FinanceChipsvgIcon from "./icons/PlasmicIcon__FinanceChipsvg"; // plasmic-import: bdbiJ_6oxU/icon
import ModeOfTravelsvgIcon from "./icons/PlasmicIcon__ModeOfTravelsvg"; // plasmic-import: WZEm74zGD5/icon

export type PlasmicExcursao__VariantMembers = {};
export type PlasmicExcursao__VariantsArgs = {};
type VariantPropType = keyof PlasmicExcursao__VariantsArgs;
export const PlasmicExcursao__VariantProps = new Array<VariantPropType>();

export type PlasmicExcursao__ArgsType = {
  activeView?: string;
  onActiveViewChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicExcursao__ArgsType;
export const PlasmicExcursao__ArgProps = new Array<ArgPropType>(
  "activeView",
  "onActiveViewChange"
);

export type PlasmicExcursao__OverridesType = {
  root?: p.Flex<"div">;
  tumbnail?: p.Flex<typeof p.PlasmicImg>;
  header?: p.Flex<"div">;
  left?: p.Flex<"div">;
  caption?: p.Flex<"div">;
  title?: p.Flex<"h2">;
  subtitle?: p.Flex<"h3">;
  date?: p.Flex<"div">;
  right?: p.Flex<"div">;
  info1?: p.Flex<"div">;
  soldTickets?: p.Flex<typeof IconLabel>;
  label?: p.Flex<"div">;
  emptySeats?: p.Flex<typeof IconLabel>;
  label2?: p.Flex<"div">;
  info2?: p.Flex<"div">;
  revenue?: p.Flex<typeof IconLabel>;
  label3?: p.Flex<"div">;
  averagePrice?: p.Flex<typeof IconLabel>;
  label4?: p.Flex<"div">;
  menu?: p.Flex<typeof AntdMenu>;
  salesTab?: p.Flex<typeof AntdMenuItem>;
  tabButton1?: p.Flex<"div">;
  tripsTab?: p.Flex<typeof AntdMenuItem>;
  tabButton2?: p.Flex<"div">;
  viagens?: p.Flex<"div">;
  body?: p.Flex<"section">;
  salesView?: p.Flex<"div">;
  offers?: p.Flex<"div">;
  offersHeading?: p.Flex<"div">;
  offersTitle?: p.Flex<"h3">;
  batchItem?: p.Flex<typeof CardItem>;
  orders?: p.Flex<"div">;
  ordersHeading?: p.Flex<"div">;
  ordersTitle?: p.Flex<"h3">;
  ordersTable?: p.Flex<typeof RichTable>;
  tripsView?: p.Flex<"div">;
  route?: p.Flex<"div">;
  passengers?: p.Flex<"div">;
  ticketsTable?: p.Flex<typeof RichTable>;
};

export interface DefaultExcursaoProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicExcursao__RenderFunc(props: {
  variants: PlasmicExcursao__VariantsArgs;
  args: PlasmicExcursao__ArgsType;
  overrides: PlasmicExcursao__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "ordersTable.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ordersTable.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ordersTable.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "activeView",
        type: "writable",
        variableType: "text",

        valueProp: "activeView",
        onChangeProp: "onActiveViewChange"
      },
      {
        path: "ticketsTable.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ticketsTable.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ticketsTable.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  useDependencyAwareQuery({
    name: "tour",
    getDataOp: () => ({
      sourceId: "3D2qpwXrTDzp5gVoPy8prT",
      opId: "0345af56-e087-48f3-85c3-9c20e4d92155",
      userArgs: {
        id: [
          (() => {
            try {
              return $ctx.query.tour_id;
            } catch (e) {
              if (e instanceof TypeError) {
                return null;
              }
              throw e;
            }
          })()
        ]
      },
      cacheKey:
        "plasmic.$." +
        (() => {
          try {
            return "tour_detail";
          } catch (e) {
            if (e instanceof TypeError) {
              return "";
            }
            throw e;
          }
        })() +
        ".$.KuPiQuxZx.$.",
      invalidatedKeys: null,
      roleId: null
    }),
    $queries,
    setDollarQueries
  });
  useDependencyAwareQuery({
    name: "batches",
    getDataOp: () => ({
      sourceId: "3D2qpwXrTDzp5gVoPy8prT",
      opId: "2eb34469-94f3-4441-ac28-82cb932fd172",
      userArgs: {
        filters: [
          (() => {
            try {
              return $queries.tour.data.title;
            } catch (e) {
              if (e instanceof TypeError) {
                return null;
              }
              throw e;
            }
          })()
        ]
      },
      cacheKey:
        "plasmic.$." +
        (() => {
          try {
            return "tour_detail";
          } catch (e) {
            if (e instanceof TypeError) {
              return "";
            }
            throw e;
          }
        })() +
        ".$.bPvUNNHv5.$.",
      invalidatedKeys: null,
      roleId: null
    }),
    $queries,
    setDollarQueries
  });
  useDependencyAwareQuery({
    name: "orders",
    getDataOp: () => ({
      sourceId: "3D2qpwXrTDzp5gVoPy8prT",
      opId: "17d4d04c-88ef-4a3f-a38d-be4f526ad087",
      userArgs: {
        filters: [
          (() => {
            try {
              return $queries.tour.data.title;
            } catch (e) {
              if (e instanceof TypeError) {
                return null;
              }
              throw e;
            }
          })()
        ]
      },
      cacheKey:
        "plasmic.$." +
        (() => {
          try {
            return "tour_detail";
          } catch (e) {
            if (e instanceof TypeError) {
              return "";
            }
            throw e;
          }
        })() +
        ".$.RLXJHFcm-.$.",
      invalidatedKeys: null,
      roleId: null
    }),
    $queries,
    setDollarQueries
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsn3GbfBwefkZu8()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicExcursao.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicExcursao.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicExcursao.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <p.PlasmicImg
              data-plasmic-name={"tumbnail"}
              data-plasmic-override={overrides.tumbnail}
              alt={""}
              className={classNames(sty.tumbnail)}
              displayHeight={
                hasVariant(globalVariants, "screen", "sm")
                  ? ("300px" as const)
                  : ("600px" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={(() => {
                try {
                  return $queries.tour.data.tumbnail[0].url;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "sm") ? true : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              {(hasVariant(globalVariants, "screen", "sm") ? true : true) ? (
                <div
                  data-plasmic-name={"left"}
                  data-plasmic-override={overrides.left}
                  className={classNames(projectcss.all, sty.left)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"caption"}
                    data-plasmic-override={overrides.caption}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.caption)}
                  >
                    <h2
                      data-plasmic-name={"title"}
                      data-plasmic-override={overrides.title}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.title
                      )}
                    >
                      {(() => {
                        try {
                          return $queries.tour.data.title;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </h2>
                    <h3
                      data-plasmic-name={"subtitle"}
                      data-plasmic-override={overrides.subtitle}
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.subtitle
                      )}
                    >
                      {(() => {
                        try {
                          return $queries.tour.data.subtitle[0];
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </h3>
                  </p.Stack>
                  <div
                    data-plasmic-name={"date"}
                    data-plasmic-override={overrides.date}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.date
                    )}
                  >
                    {(() => {
                      try {
                        return $queries.tour.data.datetime[0];
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </div>
                </div>
              ) : null}
              {(hasVariant(globalVariants, "screen", "sm") ? true : true) ? (
                <div
                  data-plasmic-name={"right"}
                  data-plasmic-override={overrides.right}
                  className={classNames(projectcss.all, sty.right)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__m4Z9)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"info1"}
                          data-plasmic-override={overrides.info1}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.info1)}
                        >
                          <IconLabel
                            data-plasmic-name={"soldTickets"}
                            data-plasmic-override={overrides.soldTickets}
                            className={classNames(
                              "__wab_instance",
                              sty.soldTickets
                            )}
                            icon={
                              <LocalActivitysvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__bsarG
                                )}
                                role={"img"}
                              />
                            }
                          >
                            <div
                              data-plasmic-name={"label"}
                              data-plasmic-override={overrides.label}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.label
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    $queries.tour.data.occupancy + " passagens"
                                  );
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "Label";
                                  }
                                  throw e;
                                }
                              })()}
                            </div>
                          </IconLabel>
                          <IconLabel
                            data-plasmic-name={"emptySeats"}
                            data-plasmic-override={overrides.emptySeats}
                            className={classNames(
                              "__wab_instance",
                              sty.emptySeats
                            )}
                            icon={
                              <EventSeatsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gZAuL
                                )}
                                role={"img"}
                              />
                            }
                          >
                            <div
                              data-plasmic-name={"label2"}
                              data-plasmic-override={overrides.label2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.label2
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    $queries.tour.data.avaiability + " vagas"
                                  );
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "Label";
                                  }
                                  throw e;
                                }
                              })()}
                            </div>
                          </IconLabel>
                        </p.Stack>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"info2"}
                          data-plasmic-override={overrides.info2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.info2)}
                        >
                          <IconLabel
                            data-plasmic-name={"revenue"}
                            data-plasmic-override={overrides.revenue}
                            className={classNames(
                              "__wab_instance",
                              sty.revenue
                            )}
                            icon={
                              <PaymentsFill0Wght400Grad0Opsz48SvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__y0Qi8
                                )}
                                role={"img"}
                              />
                            }
                          >
                            <div
                              data-plasmic-name={"label3"}
                              data-plasmic-override={overrides.label3}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.label3
                              )}
                            >
                              {(() => {
                                try {
                                  return "R$ " + $queries.tour.data.revenue;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "Label";
                                  }
                                  throw e;
                                }
                              })()}
                            </div>
                          </IconLabel>
                          <IconLabel
                            data-plasmic-name={"averagePrice"}
                            data-plasmic-override={overrides.averagePrice}
                            className={classNames(
                              "__wab_instance",
                              sty.averagePrice
                            )}
                            icon={
                              <CalculatesvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__z63Ra
                                )}
                                role={"img"}
                              />
                            }
                          >
                            <div
                              data-plasmic-name={"label4"}
                              data-plasmic-override={overrides.label4}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.label4
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    "R$ " + $queries.tour.data.average_price
                                  );
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "Label";
                                  }
                                  throw e;
                                }
                              })()}
                            </div>
                          </IconLabel>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </div>
              ) : null}
            </p.Stack>
          ) : null}
          <AntdMenu
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            className={classNames("__wab_instance", sty.menu)}
          >
            <AntdMenuItem
              data-plasmic-name={"salesTab"}
              data-plasmic-override={overrides.salesTab}
              className={classNames("__wab_instance", sty.salesTab)}
              key={"sales" as const}
              onClick={async () => {
                const $steps = {};
                $steps["updateActiveView"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "ZyRu08ClS",
                            componentUuid: "AHVBnXmex-jZ",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["activeView"]
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "ZyRu08ClS",
                            componentUuid: "AHVBnXmex-jZ",
                            argName: "operation"
                          },
                          () => 0
                        ),
                        value: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "ZyRu08ClS",
                            componentUuid: "AHVBnXmex-jZ",
                            argName: "value"
                          },
                          () => "sales"
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "ZyRu08ClS",
                          componentUuid: "AHVBnXmex-jZ"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateActiveView"] === "object" &&
                  typeof $steps["updateActiveView"].then === "function"
                ) {
                  $steps["updateActiveView"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "ZyRu08ClS",
                      componentUuid: "AHVBnXmex-jZ"
                    },
                    $steps["updateActiveView"]
                  );
                }
              }}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"tabButton1"}
                  data-plasmic-override={overrides.tabButton1}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.tabButton1)}
                >
                  <FinanceChipsvgIcon
                    className={classNames(projectcss.all, sty.svg__mlLUo)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aU4Ik
                    )}
                  >
                    {"Vendas"}
                  </div>
                </p.Stack>
              ) : null}
            </AntdMenuItem>
            <AntdMenuItem
              data-plasmic-name={"tripsTab"}
              data-plasmic-override={overrides.tripsTab}
              className={classNames("__wab_instance", sty.tripsTab)}
              key={"trips" as const}
              onClick={async () => {
                const $steps = {};
                $steps["updateActiveView"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "XnCHF0InJ",
                            componentUuid: "AHVBnXmex-jZ",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["activeView"]
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "XnCHF0InJ",
                            componentUuid: "AHVBnXmex-jZ",
                            argName: "operation"
                          },
                          () => 0
                        ),
                        value: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "XnCHF0InJ",
                            componentUuid: "AHVBnXmex-jZ",
                            argName: "value"
                          },
                          () => "trips"
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "XnCHF0InJ",
                          componentUuid: "AHVBnXmex-jZ"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateActiveView"] === "object" &&
                  typeof $steps["updateActiveView"].then === "function"
                ) {
                  $steps["updateActiveView"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "XnCHF0InJ",
                      componentUuid: "AHVBnXmex-jZ"
                    },
                    $steps["updateActiveView"]
                  );
                }
              }}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"tabButton2"}
                data-plasmic-override={overrides.tabButton2}
                hasGap={true}
                className={classNames(projectcss.all, sty.tabButton2)}
              >
                <ModeOfTravelsvgIcon
                  className={classNames(projectcss.all, sty.svg__qwsmA)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"viagens"}
                  data-plasmic-override={overrides.viagens}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.viagens
                  )}
                >
                  {"Viagens"}
                </div>
              </p.Stack>
            </AntdMenuItem>
          </AntdMenu>
          {true ? (
            <section
              data-plasmic-name={"body"}
              data-plasmic-override={overrides.body}
              className={classNames(projectcss.all, sty.body)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"salesView"}
                  data-plasmic-override={overrides.salesView}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.salesView)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"offers"}
                    data-plasmic-override={overrides.offers}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.offers)}
                  >
                    {true ? (
                      <div
                        data-plasmic-name={"offersHeading"}
                        data-plasmic-override={overrides.offersHeading}
                        className={classNames(
                          projectcss.all,
                          sty.offersHeading
                        )}
                      >
                        <h3
                          data-plasmic-name={"offersTitle"}
                          data-plasmic-override={overrides.offersTitle}
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.offersTitle
                          )}
                        >
                          {"Ofertas"}
                        </h3>
                      </div>
                    ) : null}
                    {(
                      (() => {
                        try {
                          return $queries.batches.data;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((batch, currentIndex) => (
                      <CardItem
                        data-plasmic-name={"batchItem"}
                        data-plasmic-override={overrides.batchItem}
                        className={classNames("__wab_instance", sty.batchItem)}
                        description={batch.description}
                        highlight={batch.sold + " pedidos"}
                        key={currentIndex}
                        title={batch.title}
                      />
                    ))}
                  </p.Stack>
                  {(
                    hasVariant(globalVariants, "screen", "sm") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"orders"}
                      data-plasmic-override={overrides.orders}
                      className={classNames(projectcss.all, sty.orders)}
                    >
                      {true ? (
                        <div
                          data-plasmic-name={"ordersHeading"}
                          data-plasmic-override={overrides.ordersHeading}
                          className={classNames(
                            projectcss.all,
                            sty.ordersHeading
                          )}
                        >
                          <h3
                            data-plasmic-name={"ordersTitle"}
                            data-plasmic-override={overrides.ordersTitle}
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.ordersTitle
                            )}
                          >
                            {"Pedidos"}
                          </h3>
                        </div>
                      ) : null}
                      {(() => {
                        const child$Props = {
                          canSelectRows: "none" as const,
                          className: classNames(
                            "__wab_instance",
                            sty.ordersTable
                          ),
                          data: (() => {
                            try {
                              return $queries.orders;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          fields: (() => {
                            const __composite = [
                              {
                                key: "__airtable_id",
                                fieldId: "__airtable_id",
                                isHidden: true
                              },
                              {
                                key: "id",
                                fieldId: "id",
                                title: "id",
                                dataType: "number",
                                isHidden: true
                              },
                              {
                                key: "datetime",
                                fieldId: "datetime",
                                title: "Data",
                                dataType: "string",
                                expr: null
                              },
                              {
                                key: "user",
                                fieldId: "user",
                                title: "Comprador",
                                dataType: "string",
                                expr: null
                              },
                              {
                                key: "status",
                                fieldId: "status",
                                title: "Status"
                              },
                              {
                                key: "total",
                                fieldId: "total",
                                expr: null,
                                title: "Total"
                              },
                              {
                                key: "receipt",
                                fieldId: "receipt",
                                isHidden: false,
                                title: "Recibo"
                              },
                              {
                                key: "batch",
                                fieldId: "batch",
                                isHidden: true
                              },
                              {
                                key: "tickets",
                                fieldId: "tickets",
                                isHidden: true
                              },
                              {
                                key: "passengers",
                                fieldId: "passengers",
                                isHidden: true
                              },
                              { key: "tour", fieldId: "tour", isHidden: true },
                              {
                                key: "record_id",
                                fieldId: "record_id",
                                isHidden: true
                              },
                              {
                                key: "buyer_name",
                                fieldId: "buyer_name",
                                isHidden: true
                              },
                              {
                                key: "formatted_datetime",
                                fieldId: "formatted_datetime",
                                isHidden: true
                              }
                            ];
                            __composite["2"]["expr"] = currentItem => {
                              return currentItem.formatted_datetime;
                            };
                            __composite["3"]["expr"] = currentItem => {
                              return currentItem.buyer_name;
                            };
                            __composite["5"]["expr"] = currentItem => {
                              return "R$ " + currentItem.total;
                            };
                            return __composite;
                          })(),

                          hideColumnPicker: hasVariant(
                            globalVariants,
                            "screen",
                            "sm"
                          )
                            ? true
                            : false,
                          hideDensity: hasVariant(
                            globalVariants,
                            "screen",
                            "sm"
                          )
                            ? true
                            : undefined,
                          hideExports: hasVariant(
                            globalVariants,
                            "screen",
                            "sm"
                          )
                            ? true
                            : undefined,
                          hideSearch: hasVariant(globalVariants, "screen", "sm")
                            ? true
                            : undefined,
                          onRowSelectionChanged: async (...eventArgs) => {
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["ordersTable", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["ordersTable", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["ordersTable", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pagination: true,
                          selectedRowKey: p.generateStateValueProp($state, [
                            "ordersTable",
                            "selectedRowKey"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "ordersTable.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "ordersTable.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "ordersTable.selectedRows"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"ordersTable"}
                            data-plasmic-override={overrides.ordersTable}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  ) : null}
                </p.Stack>
              ) : null}
              {(() => {
                try {
                  return $state.activeView == "trips";
                } catch (e) {
                  if (e instanceof TypeError) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"tripsView"}
                  data-plasmic-override={overrides.tripsView}
                  className={classNames(projectcss.all, sty.tripsView)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"route"}
                    data-plasmic-override={overrides.route}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.route)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rHPi7)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zewVm
                        )}
                      >
                        {"Rota"}
                      </div>
                    </div>
                  </p.Stack>
                  <div
                    data-plasmic-name={"passengers"}
                    data-plasmic-override={overrides.passengers}
                    className={classNames(projectcss.all, sty.passengers)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__y7U9O)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__enEud
                        )}
                      >
                        {"Passageiros"}
                      </div>
                    </div>
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.ticketsTable
                        ),
                        onRowSelectionChanged: async (...eventArgs) => {
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKey",
                            ["ticketsTable", "selectedRowKey"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRow",
                            ["ticketsTable", "selectedRow"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRows",
                            ["ticketsTable", "selectedRows"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                        },
                        selectedRowKey: p.generateStateValueProp($state, [
                          "ticketsTable",
                          "selectedRowKey"
                        ])
                      };
                      p.initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "selectedRowKey",
                            plasmicStateName: "ticketsTable.selectedRowKey"
                          },
                          {
                            name: "selectedRow",
                            plasmicStateName: "ticketsTable.selectedRow"
                          },
                          {
                            name: "selectedRows",
                            plasmicStateName: "ticketsTable.selectedRows"
                          }
                        ],
                        [],
                        RichTable_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <RichTable
                          data-plasmic-name={"ticketsTable"}
                          data-plasmic-override={overrides.ticketsTable}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
              ) : null}
            </section>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tumbnail",
    "header",
    "left",
    "caption",
    "title",
    "subtitle",
    "date",
    "right",
    "info1",
    "soldTickets",
    "label",
    "emptySeats",
    "label2",
    "info2",
    "revenue",
    "label3",
    "averagePrice",
    "label4",
    "menu",
    "salesTab",
    "tabButton1",
    "tripsTab",
    "tabButton2",
    "viagens",
    "body",
    "salesView",
    "offers",
    "offersHeading",
    "offersTitle",
    "batchItem",
    "orders",
    "ordersHeading",
    "ordersTitle",
    "ordersTable",
    "tripsView",
    "route",
    "passengers",
    "ticketsTable"
  ],
  tumbnail: ["tumbnail"],
  header: [
    "header",
    "left",
    "caption",
    "title",
    "subtitle",
    "date",
    "right",
    "info1",
    "soldTickets",
    "label",
    "emptySeats",
    "label2",
    "info2",
    "revenue",
    "label3",
    "averagePrice",
    "label4"
  ],
  left: ["left", "caption", "title", "subtitle", "date"],
  caption: ["caption", "title", "subtitle"],
  title: ["title"],
  subtitle: ["subtitle"],
  date: ["date"],
  right: [
    "right",
    "info1",
    "soldTickets",
    "label",
    "emptySeats",
    "label2",
    "info2",
    "revenue",
    "label3",
    "averagePrice",
    "label4"
  ],
  info1: ["info1", "soldTickets", "label", "emptySeats", "label2"],
  soldTickets: ["soldTickets", "label"],
  label: ["label"],
  emptySeats: ["emptySeats", "label2"],
  label2: ["label2"],
  info2: ["info2", "revenue", "label3", "averagePrice", "label4"],
  revenue: ["revenue", "label3"],
  label3: ["label3"],
  averagePrice: ["averagePrice", "label4"],
  label4: ["label4"],
  menu: ["menu", "salesTab", "tabButton1", "tripsTab", "tabButton2", "viagens"],
  salesTab: ["salesTab", "tabButton1"],
  tabButton1: ["tabButton1"],
  tripsTab: ["tripsTab", "tabButton2", "viagens"],
  tabButton2: ["tabButton2", "viagens"],
  viagens: ["viagens"],
  body: [
    "body",
    "salesView",
    "offers",
    "offersHeading",
    "offersTitle",
    "batchItem",
    "orders",
    "ordersHeading",
    "ordersTitle",
    "ordersTable",
    "tripsView",
    "route",
    "passengers",
    "ticketsTable"
  ],
  salesView: [
    "salesView",
    "offers",
    "offersHeading",
    "offersTitle",
    "batchItem",
    "orders",
    "ordersHeading",
    "ordersTitle",
    "ordersTable"
  ],
  offers: ["offers", "offersHeading", "offersTitle", "batchItem"],
  offersHeading: ["offersHeading", "offersTitle"],
  offersTitle: ["offersTitle"],
  batchItem: ["batchItem"],
  orders: ["orders", "ordersHeading", "ordersTitle", "ordersTable"],
  ordersHeading: ["ordersHeading", "ordersTitle"],
  ordersTitle: ["ordersTitle"],
  ordersTable: ["ordersTable"],
  tripsView: ["tripsView", "route", "passengers", "ticketsTable"],
  route: ["route"],
  passengers: ["passengers", "ticketsTable"],
  ticketsTable: ["ticketsTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tumbnail: typeof p.PlasmicImg;
  header: "div";
  left: "div";
  caption: "div";
  title: "h2";
  subtitle: "h3";
  date: "div";
  right: "div";
  info1: "div";
  soldTickets: typeof IconLabel;
  label: "div";
  emptySeats: typeof IconLabel;
  label2: "div";
  info2: "div";
  revenue: typeof IconLabel;
  label3: "div";
  averagePrice: typeof IconLabel;
  label4: "div";
  menu: typeof AntdMenu;
  salesTab: typeof AntdMenuItem;
  tabButton1: "div";
  tripsTab: typeof AntdMenuItem;
  tabButton2: "div";
  viagens: "div";
  body: "section";
  salesView: "div";
  offers: "div";
  offersHeading: "div";
  offersTitle: "h3";
  batchItem: typeof CardItem;
  orders: "div";
  ordersHeading: "div";
  ordersTitle: "h3";
  ordersTable: typeof RichTable;
  tripsView: "div";
  route: "div";
  passengers: "div";
  ticketsTable: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExcursao__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExcursao__VariantsArgs;
    args?: PlasmicExcursao__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExcursao__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicExcursao__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicExcursao__ArgProps,
          internalVariantPropNames: PlasmicExcursao__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicExcursao__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExcursao";
  } else {
    func.displayName = `PlasmicExcursao.${nodeName}`;
  }
  return func;
}

export const PlasmicExcursao = Object.assign(
  // Top-level PlasmicExcursao renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tumbnail: makeNodeComponent("tumbnail"),
    header: makeNodeComponent("header"),
    left: makeNodeComponent("left"),
    caption: makeNodeComponent("caption"),
    title: makeNodeComponent("title"),
    subtitle: makeNodeComponent("subtitle"),
    date: makeNodeComponent("date"),
    right: makeNodeComponent("right"),
    info1: makeNodeComponent("info1"),
    soldTickets: makeNodeComponent("soldTickets"),
    label: makeNodeComponent("label"),
    emptySeats: makeNodeComponent("emptySeats"),
    label2: makeNodeComponent("label2"),
    info2: makeNodeComponent("info2"),
    revenue: makeNodeComponent("revenue"),
    label3: makeNodeComponent("label3"),
    averagePrice: makeNodeComponent("averagePrice"),
    label4: makeNodeComponent("label4"),
    menu: makeNodeComponent("menu"),
    salesTab: makeNodeComponent("salesTab"),
    tabButton1: makeNodeComponent("tabButton1"),
    tripsTab: makeNodeComponent("tripsTab"),
    tabButton2: makeNodeComponent("tabButton2"),
    viagens: makeNodeComponent("viagens"),
    body: makeNodeComponent("body"),
    salesView: makeNodeComponent("salesView"),
    offers: makeNodeComponent("offers"),
    offersHeading: makeNodeComponent("offersHeading"),
    offersTitle: makeNodeComponent("offersTitle"),
    batchItem: makeNodeComponent("batchItem"),
    orders: makeNodeComponent("orders"),
    ordersHeading: makeNodeComponent("ordersHeading"),
    ordersTitle: makeNodeComponent("ordersTitle"),
    ordersTable: makeNodeComponent("ordersTable"),
    tripsView: makeNodeComponent("tripsView"),
    route: makeNodeComponent("route"),
    passengers: makeNodeComponent("passengers"),
    ticketsTable: makeNodeComponent("ticketsTable"),

    // Metadata about props expected for PlasmicExcursao
    internalVariantProps: PlasmicExcursao__VariantProps,
    internalArgProps: PlasmicExcursao__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Excursão",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicExcursao;
/* prettier-ignore-end */
